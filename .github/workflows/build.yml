name: build
on: 
  push: 
    branches: 
      - '**'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
env:
  NODEJS_VERSION: 12
  LUA: "5.1.4"
  NODEMCU_REPO: nodemcu/nodemcu-firmware
  NODEMCU_FIRMWARE: 3.0-master_20200610
  NODEMCU_MODULES: encoder,file,gpio,net,node,pwm2,struct,tmr,uart,wifi,ws2812
  AWS_S3_NIGHTLY_BASEURI: https://wifiy-tally-builds.fra1.digitaloceanspaces.com/
  AWS_S3_NIGHTLY_BUCKET: wifiy-tally-builds
  AWS_S3_NIGHTLY_REGION: fra1
  CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
defaults:
  run:
    shell: bash
jobs:
  # ###
  #  
  # Detect the version number to use
  # 
  # ###
  setup:
    runs-on: ubuntu-latest
    outputs:
      build_name: ${{ steps.calc.outputs.build_name }}
      author_name: ${{ steps.calc.outputs.author_name }}
      author_email: ${{ steps.calc.outputs.author_email }}
      committer_name: ${{ steps.calc.outputs.committer_name }}
      committer_email: ${{ steps.calc.outputs.committer_email }}
      is_head: ${{ steps.calc.outputs.is_head }}
      branch: ${{ steps.calc.outputs.branch }}
      tag: ${{ steps.calc.outputs.tag }}

    steps:
      - name: Checkout the source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # don't shallow clone! We could not generate a nice build_name otherwise
      - name: Generate parameters
        id: calc
        run: |
          TAG=""
          BUILD_NAME="$(git describe --tags --always)"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG="${GITHUB_REF:10}"
            BUILD_NAME="${GITHUB_REF:10}"
          fi
          echo "::set-output name=tag::$TAG"
          echo "::set-output name=build_name::$BUILD_NAME"
          echo "::set-output name=author_name::${{ github.event.commits[0].author.name }}"
          echo "::set-output name=author_email::${{ github.event.commits[0].author.email }}"
          echo "::set-output name=committer_name::${{ github.event.commits[0].committer.name }}"
          echo "::set-output name=committer_email::${{ github.event.commits[0].committer.email }}"
          echo "::set-output name=is_head::${{ github.event.commits[0].id == github.event.head_commit.id }}"
          echo "::set-output name=branch::"
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
            echo "::set-output name=branch::${GITHUB_REF:11}"
          fi
        shell: bash # we use bash syntax, so this is VERY important
      - name: Output
        run: |
          echo "build_name=${{ steps.calc.outputs.build_name }}"
          echo "author_name=${{ steps.calc.outputs.author_name }}"
          echo "author_email=${{ steps.calc.outputs.author_email }}"
          echo "committer_name=${{ steps.calc.outputs.committer_name }}"
          echo "committer_email=${{ steps.calc.outputs.committer_email }}"
          echo "is_head=${{ steps.calc.outputs.is_head }}"
          echo "branch=${{ steps.calc.outputs.branch }}"
          echo "tag=${{ steps.calc.outputs.tag }}"

  # ###
  # 
  # run Unit Tests for Hub
  # 
  # ###
  # hub-test:
  #   needs: setup
  #   env:
  #     BUILD_NAME: ${{ needs.setup.outputs.build_name }}
  #   defaults:
  #     run:
  #       working-directory: ./hub
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout the source code
  #       uses: actions/checkout@v2
  #     - run: sudo apt-get -y update
  #     - run: sudo apt-get install -y libasound2-dev
  #     - name: Use node.js ${{ env.NODEJS_VERSION }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ env.NODEJS_VERSION }}
  #     - name: Cache Node.js modules
  #       uses: actions/cache@v2
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.OS }}-node-
  #           ${{ runner.OS }}-
  #     - run: npm ci
  #     - run: npm run test:ci

  # # ###
  # #
  # # Cypress tests are integration tests that the hub
  # #
  # # ###
  # # @see https://github.com/cypress-io/github-action
  # cypress-run:
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout the source code
  #       uses: actions/checkout@v2
  #       with:
  #         path: .
  #     - run: sudo apt-get -y update
  #     - run: sudo apt-get install -y libasound2-dev
  #     - name: Use node.js ${{ env.NODEJS_VERSION }}
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ env.NODEJS_VERSION }}
  #     - # this step also runs "npm ci" and takes care of caching
  #       name: Cypress run
  #       uses: cypress-io/github-action@v2
  #       with:
  #         start: npm run cypress:backend, npm run start:frontend
  #         wait-on: 'http://localhost:3000, http://localhost:3001'
  #         working-directory: ./hub
  #         record: true
  #         spec: "cypress/**/!(manual_)*.spec.ts"
  #         tag: "node-${{ env.NODEJS_VERSION }},${{ needs.setup.outputs.build_name }}"

  # ###
  #
  # luac.cross is needed to build *.lc files that match our firmware
  # 
  # ###
  luaccross:
    name: luac.cross
    runs-on: ubuntu-latest
    steps:
      - name: Cache luac.cross
        id: cache
        uses: actions/cache@v2
        with:
          path: ./luac.cross
          key: ${{ runner.os }}-luaccross-${{ env.NODEMCU_REPO }}-${{ env.NODEMCU_FIRMWARE }}
      - name: Checkout the source code
        uses: actions/checkout@v2
        with:
          repository: ${{ env.NODEMCU_REPO }}
          ref: ${{ env.NODEMCU_FIRMWARE }}
          submodules: recursive
        if: "! steps.cache.outputs.cache-hit"
      - name: make luac.cross
        run: make -C ./app/lua/luac_cross/
        if: "! steps.cache.outputs.cache-hit"
      - name: Archive luac.cross
        uses: actions/upload-artifact@v2
        with:
          name: luaccross
          path: "./luac.cross"
          if-no-files-found: error
          retention-days: 1

  # ###
  # 
  # build the NodeMCU firmware
  #
  # basically we try to recreate https://github.com/marcelstoer/nodemcu-custom-build/blob/master/.travis.yml
  # without the upload and notification logic
  # 
  # ###
  tally-firmware:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/nodemcu-firmware
    env:
      # @see https://github.com/marcelstoer/nodemcu-custom-build/blob/master/.travis.yml for used environment variables
      USER_PROLOG: ""
      X_EMAIL: invalid@example.com
      X_U8G_FONTS: font_6x10,font_chikita
      X_U8G_DISPLAY_I2C: ""
      X_U8G_DISPLAY_SPI: ""
      X_UCG_DISPLAY_SPI: ""
      X_LUA_FLASH_STORE: "0x15000"
      X_SPIFFS_FIXED_LOCATION: "0"
      X_SPIFFS_MAX_FILESYSTEM_SIZE: "0"
      X_SSL_ENABLED: "false"
      X_DEBUG_ENABLED: "false"
      X_FATFS_ENABLED: "false"
    steps:
      - name: set dynamic environment variables
        run: |
          MODULE_HASH=$(echo "${NODEMCU_MODULES}${X_LUA_FLASH_STORE}${X_SSL_ENABLED}${X_DEBUG_ENABLED}${X_FATFS_ENABLED}" | sha512sum | cut -c1-8)
          echo "file_name_float=nodemcu-${{ env.NODEMCU_FIRMWARE }}-${MODULE_HASH}-float.bin" >> $GITHUB_ENV

          echo "TRAVIS_BUILD_DIR=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          echo "X_MODULES=${NODEMCU_MODULES}" >> $GITHUB_ENV
          echo "X_BRANCH=${NODEMCU_FIRMWARE}" >> $GITHUB_ENV
        working-directory: ./
      - name: Cache luac.cross
        id: cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/nodemcu-firmware/bin/nodemcu-*-float.bin
          key: ${{ runner.os }}-${{ env.file_name_float }}
      - name: Checkout NodeMCU custom build
        if: "! steps.cache.outputs.cache-hit"
        uses: actions/checkout@v2
        with:
          repository: marcelstoer/nodemcu-custom-build
          ref: master
          path: ${{ github.workspace }}
      - name: Checkout NodeMCU firmware
        if: "! steps.cache.outputs.cache-hit"
        uses: actions/checkout@v2
        with:
          repository: ${{ env.NODEMCU_REPO }}
          ref: ${{ env.NODEMCU_FIRMWARE }}
          submodules: recursive
          path: ${{ github.workspace }}/nodemcu-firmware
      - name: Checkout our repo
        if: "! steps.cache.outputs.cache-hit"
        uses: actions/checkout@v2
        with:
          path: ${{ github.workspace }}/wifi-tally
      - name: Install dependencies
        if: "! steps.cache.outputs.cache-hit"
        run: |
          # needed to build esptool.py
          pip install pyserial
          sudo apt-get install srecord
      - name: Build
        if: "! steps.cache.outputs.cache-hit"
        run: |
          # "bash" keyword is necessary, because the shebang points to /bin/env, which does not exist at that place
          bash "${GITHUB_WORKSPACE}/ESP8266/install.sh"
          bash "${GITHUB_WORKSPACE}/ESP8266/before-script.sh"
          bash "${GITHUB_WORKSPACE}/wifi-tally/firmware/script.sh"
      - name: Archive firmware
        uses: actions/upload-artifact@v2
        with:
          name: nodemcu-firmware
          path: ${{ github.workspace }}/nodemcu-firmware/bin/nodemcu-*-float.bin
          if-no-files-found: error
          retention-days: 1


  # ###
  # 
  # Building the code that runs on the tally light
  # 
  # ###
  tally-build:
    runs-on: ubuntu-latest
    needs:
      - setup
      - luaccross
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v2
      - name: Cache Lua Environment
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/.lua
            ${{ github.workspace }}/.luarocks
          key: ${{ runner.os }}-lua-${{ env.LUA }}
      - name: Install Lua ${{ env.LUA }}
        uses: leafo/gh-actions-lua@v8.0.0
        with:
          luaVersion: ${{ env.LUA }}
      - uses: leafo/gh-actions-luarocks@v4.0.0
      - name: "Log Environment"
        run: |
          echo "::group::Environment Variables"
          env | sort
          echo "::endgroup::"
          echo "::group::Lua"
          which lua
          lua -v
          echo "::endgroup::"
          echo "::group::Luarocks"
          which luarocks
          luarocks --version
          luarocks list
          echo "::endgroup::"
      - uses: actions/download-artifact@v2
        with:
          name: luaccross
          path: /tmp
      - name: Install dependencies
        run: |
          sudo mv /tmp/luac.cross /usr/local/bin
          sudo chmod a+x /usr/local/bin/luac.cross
          luarocks install busted
      - name: Test
        run: make test
        working-directory: ./tally
      - name: Build
        run: make build
        working-directory: ./tally
      - name: Archive
        uses: actions/upload-artifact@v2
        with:
          name: tally-dist
          path: ./tally/out
          if-no-files-found: error
          retention-days: 1


  # ###
  # 
  # Render documentation
  # 
  # ###
  documentation:
    # @TODO: also use ubuntu-latest once Github finished migration to 20.04
    # all we want is a python that is NOT 2.7 - d'oh!
    runs-on: ubuntu-20.04 
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v2
      - name: Cache pip
        uses: actions/cache@v2
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('${{ github.workspace }}/documentation/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt --user
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
        working-directory: ./documentation
      - name: "Log Environment"
        run: |
          echo "::group::Environment Variables"
          env | sort
          echo "::endgroup::"
          echo "::group::Pip"
          python --version
          python -m pip list
          echo "::endgroup::"
      - name: "Build"
        run: |
          mkdocs build
        working-directory: ./documentation
      - name: Archive HTML
        uses: actions/upload-artifact@v2
        with:
          name: documentation-html
          path: ./documentation/site
          if-no-files-found: error
          retention-days: 1
      - name: Archive markdown
        uses: actions/upload-artifact@v2
        with:
          name: documentation-markdown
          path: ./documentation/docs
          if-no-files-found: error
          retention-days: 1

  # ###
  #
  # Publish the documentation
  #
  # ###
  documentation-publish:
    # only publish when on main branch
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: 
      - documentation
      - setup
    runs-on: ubuntu-latest
    env:
      PAGES_REPO: wifi-tally/wifi-tally.github.io
    steps:
      - name: Checkout Pages
        uses: actions/checkout@v2
        with: 
          repository: ${{ env.PAGES_REPO }}
          ref: main
          token: ${{ secrets.PAGES_TOKEN }}
          path: .
          fetch-depth: 1
      - uses: actions/download-artifact@v2
        with:
          name: documentation-html
          path: .
      - name: Commit changes
        run: |
          if [ $(git status --porcelain | wc -l) == "0" ]; then
            echo "No changes in the documentation"
          else
            git config user.email "bot@xopn.de"
            git config user.name "Xopn Bot"
            git add .
            git commit -m "update for ${{ needs.setup.outputs.build_name }}" --date "$(date)"
          fi
      - name: Push Pages
        uses: ad-m/github-push-action@master
        with:
          repository: ${{ env.PAGES_REPO }}
          github_token: ${{ secrets.PAGES_TOKEN }}
          branch: main

  # ###
  # 
  # Upload firmware and code
  # 
  # ###
  tally-upload:
    needs: 
      - tally-build
      - tally-firmware
      - setup
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.aws.outputs.artifact }}
      artifact_name: ${{ steps.aws.outputs.artifact_name }}
    env:
      BUILD_NAME: ${{ needs.setup.outputs.build_name }}
    steps:
      - name: Get Firmware
        uses: actions/download-artifact@v2
        with:
          name: nodemcu-firmware
          path: ${{ github.workspace }}/esp8266
      - name: Get Tally
        uses: actions/download-artifact@v2
        with:
          name: tally-dist
          path: ${{ github.workspace }}/esp8266
      - name: Zip it
        run: |
          BUILD_NAME=${BUILD_NAME/#v/}
          zip -Jrq "${GITHUB_WORKSPACE}/vtally-${BUILD_NAME}-esp8266.zip" *
        working-directory: ${{ github.workspace }}/esp8266
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_NIGHTLY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_NIGHTLY_KEY }}
          aws-region: ${{ env.AWS_S3_NIGHTLY_REGION }}
      - name: Push artifact to AWS S3
        id: aws
        run: |
          # strip the "v" in front of the version
          BUILD_NAME=${BUILD_NAME/#v/}
          S3_PREFIX="vtally-${BUILD_NAME}"
          ARTIFACT_FILENAME="vtally-${BUILD_NAME}-esp8266.zip"
          aws s3 cp "${ARTIFACT_FILENAME}" "s3://${AWS_S3_NIGHTLY_BUCKET}/${S3_PREFIX}/${ARTIFACT_NAME}" --acl public-read
          echo "::warning ::Artifact is available at ${AWS_S3_NIGHTLY_BASEURI}/${S3_PREFIX}/${ARTIFACT_FILENAME} for the next days."
          echo "::set-output name=artifact::${AWS_S3_NIGHTLY_BASEURI}/${S3_PREFIX}/${ARTIFACT_FILENAME}"
          echo "::set-output name=artifact_name::${ARTIFACT_FILENAME}"

  # ###
  #
  # Bundle it all together
  #
  # ###
  bundle-and-upload:
    needs:
      - documentation
      - tally-build
      - tally-firmware
      - setup
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.aws.outputs.artifact }}
      artifact_name: ${{ steps.aws.outputs.artifact_name }}
    env:
      BUILD_NAME: ${{ needs.setup.outputs.build_name }}
    steps:
      - name: Checkout the source code
        uses: actions/checkout@v2
      - run: sudo apt-get -y update
      - run: sudo apt-get install -y libasound2-dev
      - name: Use node.js ${{ env.NODEJS_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODEJS_VERSION }}
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci
        working-directory: ${{ github.workspace }}/hub
      - run: |
          mkdir ${GITHUB_WORKSPACE}/hub/dist
          mkdir ${GITHUB_WORKSPACE}/hub/dist/docs
          mkdir ${GITHUB_WORKSPACE}/hub/dist/esp8266
      - run: ./scripts/build.sh
        working-directory: ${{ github.workspace }}/hub
      - name: Get HTML documentation
        uses: actions/download-artifact@v2
        with:
          name: documentation-html
          path: ${{ github.workspace }}/hub/dist/docs/html
      - name: Get Markdown documentation
        uses: actions/download-artifact@v2
        with:
          name: documentation-markdown
          path: ${{ github.workspace }}/hub/dist/docs/markdown
      - name: Get Firmware
        uses: actions/download-artifact@v2
        with:
          name: nodemcu-firmware
          path: ${{ github.workspace }}/hub/dist/esp8266
      - name: Get Tally
        uses: actions/download-artifact@v2
        with:
          name: tally-dist
          path: ${{ github.workspace }}/hub/dist/esp8266
      - name: Copy static files
        run: |
          cp "${GITHUB_WORKSPACE}/Readme.md" "${GITHUB_WORKSPACE}/hub/dist"
          cp "${GITHUB_WORKSPACE}/LICENSE" "${GITHUB_WORKSPACE}/hub/dist"
          cp "${GITHUB_WORKSPACE}/Changelog.md" "${GITHUB_WORKSPACE}/hub/dist"
      - name: npm pack
        run: |
          npm shrinkwrap
          npm pack
        working-directory: ${{ github.workspace }}/hub/dist
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_S3_NIGHTLY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_S3_NIGHTLY_KEY }}
          aws-region: ${{ env.AWS_S3_NIGHTLY_REGION }}
      - name: Push artifact to AWS S3
        id: aws
        run: |
          # strip the "v" in front of the version
          BUILD_NAME=${BUILD_NAME/#v/}
          S3_PREFIX="vtally-${BUILD_NAME}"
          ARTIFACT_FILENAME="vtally-${BUILD_NAME}.tgz"
          aws s3 cp "${ARTIFACT_FILENAME}" "s3://${AWS_S3_NIGHTLY_BUCKET}/${S3_PREFIX}/${ARTIFACT_NAME}" --acl public-read
          echo "::warning ::Artifact is available at ${AWS_S3_NIGHTLY_BASEURI}/${S3_PREFIX}/${ARTIFACT_FILENAME} for the next days."
          echo "::set-output name=artifact::${AWS_S3_NIGHTLY_BASEURI}/${S3_PREFIX}/${ARTIFACT_FILENAME}"
          echo "::set-output name=artifact_name::${ARTIFACT_FILENAME}"
        working-directory: ${{ github.workspace }}/hub/dist
